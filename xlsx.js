if (typeof require !== 'undefined' && require.main === module) {
    let f1=()=>{
    }

    let f2=()=>{
        const fs = require('fs')
        const {execSync} = require('child_process')
        let oldTime=JSON.parse(fs.readFileSync('/home/user/zhaouv/callMeteor/output/pepsTimeTest.json',{encoding:'utf-8'}))
        let newTime=JSON.parse(fs.readFileSync('/home/user/guochu/Packages/callMeteor/output/pepsTimeTest.json',{encoding:'utf-8'}))
        let tasks=JSON.parse(fs.readFileSync('/home/user/guochu/Packages/callMeteor/in/dimensionTasks.json',{encoding:'utf-8'}))
        let data={title:'time',data:[['n','d','circuit','old','new']],outFileName:'output/pepsTimeCompare.xlsx'}
        for (let index = 0; index < tasks.length; index++) {
            data.data.push([...tasks[index],oldTime[index],newTime[index]])
        }
        fs.writeFileSync('output/pepsTimeCompare.json',JSON.stringify(data),{encoding:'utf-8'})
        execSync(`python3 convertToXlsx.py output/pepsTimeCompare.json`)
    }

    let pepstime=()=>{
        const fs = require('fs')
        const {execSync} = require('child_process')
        let newTime=JSON.parse(fs.readFileSync('../callMeteor/output/PEPSTimeTest.json',{encoding:'utf-8'}))
        let tasks=JSON.parse(fs.readFileSync('output/PEPSTimeInputs.json',{encoding:'utf-8'}))
        let data={title:'peps time',data:[['n','d','circuit','time']],outFileName:'output/PEPSTimeTest.xlsx'}
        for (let index = 0; index < tasks.length; index++) {
            data.data.push([...tasks[index].slice(2),newTime[index]])
        }
        fs.writeFileSync('output/PEPSTimeTest.json',JSON.stringify(data),{encoding:'utf-8'})
        execSync(`python3 convertToXlsx.py output/PEPSTimeTest.json`)
    }

    let sfatime=()=>{
        const fs = require('fs')
        const {execSync} = require('child_process')
        let newTime=JSON.parse(fs.readFileSync('../callMeteor/output/SFATimeTest.json',{encoding:'utf-8'}))
        let tasks=JSON.parse(fs.readFileSync('output/SFATimeInputs.json',{encoding:'utf-8'}))
        let data={title:'sfa time',data:[['n','d','circuit','time','paths','crossgate','npath']],outFileName:'output/SFATimeTest.xlsx'}
        for (let index = 0; index < tasks.length; index++) {
            data.data.push([...tasks[index].slice(2),...newTime[index]])
        }
        fs.writeFileSync('output/SFATimeTest.json',JSON.stringify(data),{encoding:'utf-8'})
        execSync(`python3 convertToXlsx.py output/SFATimeTest.json`)
    }

    let satime=()=>{
        const fs = require('fs')
        const {execSync} = require('child_process')
        let t32 = [26.536493697,25.702650205,25.047977034,27.125795943,20.621264928,23.081422965,25.436511841,28.241330892,25.567911139,28.170573775,23.90414169,31.598770627,21.526252139,23.179473382,24.856245384,18.647349382,26.659572802,28.835027795,23.640539423,23.433314361,26.871879952,29.140464434,27.969781048,24.940959891,24.351127131,27.600754865,25.000191958,28.253967945,26.806227136,28.355043552,29.351931304,28.848279101,24.738309263,22.805990927,22.514508763,32.455200621,27.257246708,23.244068639,25.745578588,23.15815096,22.121910579,22.28008874,21.745080698,23.234886923,21.872793476,23.079458413,29.046338137,24.919818349,20.799916879,25.833139891,94.584031845,120.994289273,109.238312649,105.903586142,78.335417065,80.47471713,102.734317083,100.49849515,91.336099524,97.284169604,83.576306723,91.835823901,88.95526226,123.824515751,94.878807879,93.802766675,92.026468786,95.6181699,104.200654348,87.691700583,94.189174542,94.753573253,93.901254374,93.579050102,87.674556495,90.231919716,91.804061604,89.174018362,97.062627223,96.595970019,113.733146482,126.158493174,110.672855654,111.241569381,117.278148734,113.958458469,111.65274807,90.791489877,111.119401884,105.508320633,89.064239314,121.323208756,96.294512947,101.957728656,119.543884458,97.776550545,117.363726577,116.153360755,101.446952801,128.252090482,213.389211043,215.165446499,186.606649205,188.079470145,235.999235373,212.698559591,183.926723866,186.994237523,184.647076005,210.764792801,184.803811702,211.161125214,174.855668848,180.915325901,178.854157465,185.986486759,211.044794629,198.103640599,234.914448944,198.194980554,179.983205884,217.110951858,188.691502187,199.451075398,170.468399735,173.965484136,194.286179449,189.070494951,190.964719233,220.03444539,200.201779768,209.383987444,191.31925945,202.201093767,174.910796377,211.368886132,231.877536133,220.740583906,214.184407536,185.274123224,195.768888947,191.322358381,192.792902706,205.73022536,173.423207403,196.220235749,194.698112045,179.053750948,187.771778877,176.280702985,392.984462656,525.316127104,513.826378209,428.130457129,430.908977516,357.232453929,496.126492001,351.409613944,410.731138683,402.758522049,368.163323491,352.99289664,425.864769295,459.994421922,375.337052328,413.176735848,415.52292365,374.958849481,400.991172239,425.266943094,346.681569365,407.592103575,377.739049098,330.967964615,353.587504518,460.204366529,405.848507363,372.731020268,395.058094368,387.732750308,351.464776404,416.279077945,377.853420328,391.503740961,401.722506209,416.300304404,357.102599482,426.951388937,365.213376249,494.899331929,356.704744078,359.376380536,348.808258804,430.191436593,411.178550904,394.71415851,371.88716794,496.082261415,398.322233261,363.699839725]
        let t64 = [25.177105104,26.995652361,22.609763194,29.573261973,21.430154577,29.941355959,23.636375873,30.219967138,27.201822851,31.09973989,27.476324415,24.052715746,25.097407986,26.714929101,27.278810767,27.391401396,24.223975857,29.365563684,20.860854628,20.206343822,28.377732637,22.505710062,23.692361643,29.127827827,27.36476643,23.692707262,21.782545118,28.602480505,26.64940636,30.915385756,24.700428672,22.234545317,29.127471947,26.172510233,21.710747979,25.740758269,21.841504578,25.896705068,30.265333137,29.807603652,26.742656101,22.06061078,26.119294158,28.868523275,21.645511742,28.432040294,22.327232756,29.183627702,21.219583628,29.423100719,88.095810912,113.294599607,114.873990065,97.380514615,92.528014263,114.359953757,99.510211203,77.719603127,105.299301316,108.918426392,103.297298035,88.006080938,86.943615844,98.887764389,85.881850115,88.373723954,102.47567205,108.650884892,104.354387106,107.232300044,101.044332451,86.022676923,100.295452874,84.944611119,82.381573846,87.32522998,111.102577469,114.421808401,104.466253581,87.328767164,105.536710212,116.673926237,84.78513048,92.40268849,109.532072218,86.684727483,89.27394345,89.395653065,99.574736979,86.203168166,91.642009442,101.859583496,85.702759016,105.614614525,83.004405232,85.844361574,93.087057479,85.886942302,98.201587894,95.74753708,176.817617811,165.32452529,214.875817839,164.350934004,173.822299067,211.820688961,216.885147672,180.745671874,175.87429214,176.924715424,197.784398725,170.271615776,201.160463532,170.080841421,202.08554505,193.27410134,175.878361448,173.118637903,154.687229446,159.192644892,215.055830634,183.607922158,200.970945354,171.981438032,164.792394577,162.388906441,223.622731124,187.251155255,168.100070846,184.483660154,164.751626355,178.370356707,166.355614405,178.556433193,161.344331607,173.268440852,193.565262422,163.420499995,167.344793755,176.290598467,193.556329049,153.526347941,159.841950012,221.656580311,229.455762106,158.931812085,158.21066327,166.322708182,168.170259387,176.483250432,362.850533706,347.193971087,342.514878308,329.524399621,339.601588043,331.404603254,390.01905224,356.910877209,346.450461292,329.64805525,436.767233042,353.626482483,332.4218263,355.360068738,351.921187492,374.822849757,332.479416745,364.767751445,347.939028237,449.90175925,356.485155066,398.973579362,360.884784238,401.738064846,404.327212099,352.295143477,352.521006304,339.997413689,331.738388726,451.664475121,384.471615651,319.265967961,337.106240083,494.100044362,339.28130386,341.212899582,410.453888871,368.17133405,425.148617917,382.463993525,349.873852706,373.303562144,361.63872817,330.068536722,369.304137067,341.970995784,327.794805049,343.038736381,354.268025747,374.830657297]
        let data={title:'sfa time',data:[],outFileName:'output/SATimeTest.xlsx'}
        let t
        t=t32
        data.data.push(['32 threads'])
        for (const num of [30,32,33,34]) {
            data.data.push([num,'=AVERAGE(E2:BB2)','=STDEV.S(E2:BB2)','',...t.splice(0,50)])
        }
        t=t64
        data.data.push(['64 threads'])
        for (const num of [30,32,33,34]) {
            data.data.push([num,'=AVERAGE(E2:BB2)','=STDEV.S(E2:BB2)','',...t.splice(0,50)])
        }
        fs.writeFileSync('output/SATimeTest.json',JSON.stringify(data),{encoding:'utf-8'})
        execSync(`python3 convertToXlsx.py output/SATimeTest.json`)
    }

    let satime2=()=>{
        const fs = require('fs')
        const {execSync} = require('child_process')
        let t128 = [18.532357099,28.104416424,26.228139197,19.717732842,20.610119576,25.194503468,21.424195753,27.49736607,26.823065877,35.071162982,27.123072711,24.986464554,28.902417568,27.405507041,30.67843681,22.332325734,14.07285582,17.085496431,15.580697117,30.834084432,31.129728531,15.365524284,28.505281514,30.105825776,27.534148071,27.585054066,20.949623687,29.41398081,28.290760934,27.130795847,13.569403454,32.107777196,25.015769478,22.170542611,28.441354587,17.059693777,14.210631958,32.305877403,15.654912974,14.386678456,25.848193505,19.784041916,31.783853058,13.997035046,22.686513298,17.140360488,33.148333107,26.197394032,25.01863283,18.997317409,107.23530628,62.624372277,102.808379605,123.557446839,67.813125628,93.650005601,102.965268007,102.105323913,84.517271445,80.951267327,73.755898618,88.057744069,69.584107597,101.91696331,64.953126708,115.758358952,67.944237743,94.202015588,99.467500095,100.310236673,112.892986955,76.54478736,110.460686934,100.883748569,120.695041855,83.858109038,94.12974648,102.896629472,66.329540526,104.004615874,98.924444073,103.316888077,70.556096224,79.957360101,116.341920079,118.68851772,86.712299669,106.552681037,101.125934074,109.346742188,105.696020907,100.264797267,82.560918396,104.507367513,74.672773406,86.954377541,84.429261327,94.015021604,71.259648444,98.981642806,202.560792938,141.681516674,194.794614073,145.957645365,131.985216824,160.306970813,236.66292231,128.895811813,222.927592147,174.679918368,189.543303479,207.537251745,155.471175219,215.352854243,174.048059519,186.838142844,224.399525036,195.67832163,181.719602835,215.115768446,165.069561465,220.783788639,175.855906359,216.264977153,214.441811819,239.335398169,170.364069798,204.511530821,233.971175999,197.168091101,216.654309082,162.961165884,205.218553821,202.773129224,154.510766156,224.309567516,195.50792284,171.886266228,208.375610477,188.571968836,214.632703667,210.483909262,204.201539924,151.087833335,195.86810062,130.573326636,162.589223913,199.137650667,182.91659625,197.494279947,328.469192645,332.471557763,412.33336235,261.77079214,460.657272895,402.035033129,274.090807233,410.502791577,309.533837693,406.845082343,384.685144095,417.090158433,308.730465586,388.710281434,335.26308504,381.006041546,376.559851076,373.958623044,423.33971626,285.045521042,354.555248471,368.544580644,377.493772844,368.290019207,384.095167939,355.607930508,362.876803499,290.183526621,421.716064705,402.014421671,518.01220527,308.578411124,380.35885206,302.96499337,329.984648408,424.011607636,424.408175678,331.849966453,406.303419966,418.383218999,364.153745372,450.031143024,377.518436131,350.68245888,301.422801133,282.149612846,310.935006208,297.885287198,301.535693814,269.285876084,1445.862758741,1510.43344299,1165.017816839,1360.410805019,1467.575078444,1704.952716143,1304.64409056,1327.331550491,1155.56063281,1130.702454445]
        let data={title:'sfa time',data:[],outFileName:'output/SATimeTest2.xlsx'}
        let t
        t=t128
        data.data.push(['128 threads'])
        for (const num of [30,32,33,34,36]) {
            data.data.push([num,'=AVERAGE(E2:BB2)','=STDEV.S(E2:BB2)','',...t.splice(0,50)])
        }
        fs.writeFileSync('output/SATimeTest2.json',JSON.stringify(data),{encoding:'utf-8'})
        execSync(`python3 convertToXlsx.py output/SATimeTest2.json`)
    }

    eval('!'+(process.argv[2]||'f1')+'();')
}

// node ./xlsx 